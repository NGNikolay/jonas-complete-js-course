{"mappings":";;;;;;AAAA,mBAAmB;AACnB,iLAAiL;AACjL,wDAAwD;AACxD,0BAA0B;AAC1B,4BAA4B;AAC5B,mCAAmC;ACLnC,mBAAmB;AACnB,mCAAmC;AAEnC,gBAAgB;AAChB,wCAAwC;AACxC,6DAA6D;AAC7D,wCAAwC;AACxC,qHAAqH;AAErH,MAAM,qCAAe;AACd,MAAM,4CAAO,EAAE;AAEf,MAAM,4CAAY,SAAU,OAAO,EAAE,QAAQ;IAClD,0CAAK,IAAI,CAAC;iBAAE;kBAAS;IAAS;IAC9B,QAAQ,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,QAAQ,cAAc,CAAC;AACpD;AAEA,MAAM,4CAAa;AACnB,MAAM,4CAAgB;AAIP,kDAAU,OAAO,EAAE,QAAQ;IACxC,0CAAK,IAAI,CAAC;iBAAE;kBAAS;IAAS;IAC9B,QAAQ,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,QAAQ,cAAc,CAAC;AACpD;;;;ADmFA,MAAM,8BAAQ;IACZ,MAAM;QACJ;YAAE,SAAS;YAAS,UAAU;QAAE;QAChC;YAAE,SAAS;YAAS,UAAU;gBAAE,GAAG;YAAE;QAAE;KACxC;IACD,MAAM;QAAE,UAAU;IAAK;AACzB;AAEA,MAAM,mCAAa,OAAO,MAAM,CAAC,CAAC,GAAG;AACrC,MAAM,oCAAc,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,+BAAQ,uCAAuC;AAC7F,MAAM,uCAAiB,CAAA,GAAA,yCAAQ,EAAE;AACjC,4BAAM,IAAI,CAAC,QAAQ,GAAG;AACtB,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC,uCAEZ,kFAAkF;CAElF,oBAAoB;CACpB,yBAAyB;CACzB,IAAI","sources":["src/script.js","src/shoppingCart.js"],"sourcesContent":["// Importing module\r\n// import { addToCart, totalPrice as price, tq } from './shoppingCart.js';//it is hoisted so no matter where you put it, but it's kind of a convention to always put it on top!!!\r\n// All modules are executed in strict mode by default!!!\r\n// console.log(price, tq);\r\n// addToCart('bananas', 10);\r\n// console.log('Importing module');\r\n\r\nimport * as ShoppingCart from '../src/shoppingCart.js';\r\n/*\r\n// ShoppingCart.addToCart('bread', 5);\r\n// console.log(ShoppingCart.totalPrice);\r\n\r\n// import add, { totalPrice as price, tq } from './shoppingCart.js';//mixed import - bad practice\r\n// console.log(price);\r\n// console.log(tq);\r\n\r\nimport add, { cart } from './shoppingCart.js';\r\n\r\nadd('babalugas', 8);\r\nadd('hujnja', 3);\r\nadd('.I.', 2);\r\n\r\n\r\nconsole.log(cart);\r\nconst popped = cart.pop();\r\nconsole.log(popped);\r\nconsole.log(cart);\r\ncart.push(popped)\r\n// BOOOM - това чупи глави!! :)\r\n\r\n\r\n\r\n// console.log('Start fetching');\r\n// const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n// const data = await res.json();\r\n// //\r\n// // N.B. - the top level await blocks the execution of the whole module!!!\r\n// //\r\n// console.log(data);\r\n// console.log('Something');\r\n\r\nconst getLastPost = async function () {\r\n  const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n  const data = await res.json();\r\n  console.log(data);\r\n\r\n  return { title: data.at(-1).title, text: data.at(-1).body }\r\n};\r\nconst lastPost = await getLastPost();\r\nconsole.log(lastPost);\r\n\r\n\r\n////////////////////////////////\r\n// Old way of modules:\r\n\r\nconst ShoppingCart2 = (function () {\r\n  const cart = [];\r\n  const shippingCost = 10;\r\n  const totalPrice = 237;\r\n  const totalQuantity = 10;\r\n\r\n  const addToCart = function (product, quantity) {\r\n    cart.push({ product, quantity });\r\n    console.log(`${quantity} ${product} added to cart, shipping costs will be: ${shippingCost} gold`);\r\n  };\r\n\r\n  const orderStock = function (product, quantity) {\r\n    console.log(`${quantity} ${product} ordered from supplier`);\r\n  };\r\n\r\n  // this will be our public API\r\n  return {\r\n    addToCart,\r\n    cart,\r\n    totalPrice,\r\n    totalQuantity\r\n  }\r\n})();\r\n\r\nShoppingCart2.addToCart('apple', 4);\r\nShoppingCart2.addToCart('pizza', 2);\r\nconsole.log(ShoppingCart2);\r\n// this works and have worked great for many years before ES6 modules.\r\n// The limitations are:\r\n// 1. you cannot bundle the scripts like in the ES6 modules\r\n// 2. you need to create different script files for every module and link them all in the HTML - you need to be careful about the order\r\n// 3. you need to be careful with the variable names because they are all going to be in the global scope!!\r\n// 4... probably there are more :)\r\n\r\n\r\n\r\n/////////////////////////////////////////\r\n// CommonJS modules\r\n\r\n// Export\r\nexport.addToCart = function (product, quantity) {\r\n  cart.push({ product, quantity });\r\n  console.log(`${quantity} ${product} added to cart, shipping costs will be: ${shippingCost} gold`);\r\n};\r\n\r\n// Import\r\nconst { addToCart } = require('./shoppingCart.js');\r\n\r\n*/\r\n\r\n// import cloneDeep from './node_modules/lodash-es/cloneDeep.js';\r\nimport cloneDeep from 'lodash-es';\r\n\r\nconst state = {\r\n  cart: [\r\n    { product: 'bread', quantity: 5 },\r\n    { product: 'pizza', quantity: { b: 1 } },\r\n  ],\r\n  user: { loggedIn: true },\r\n};\r\n\r\nconst stateClone = Object.assign({}, state);\r\nconst stateClone1 = JSON.parse(JSON.stringify(state));//Very cool hack for deep cloning!!! :)\r\nconst stateDeepClone = cloneDeep(state);\r\nstate.user.loggedIn = false;\r\nconsole.log(stateClone);\r\nconsole.log(stateClone1);\r\nconsole.log(stateDeepClone);\r\n\r\n// for hot reload with parcel -> for remaining state and not reload the whole page\r\n\r\n// if (module.hot) {\r\n//   module.hot.accept();\r\n// }","// Exporting module\r\n// console.log('Exporting module');\r\n\r\n// Blocking code\r\n// console.log('Start Fetching users!');\r\n// await fetch('https://jsonplaceholder.typicode.com/users');\r\n// console.log('Finish fetching users');\r\n// console.log('Top lvl await blocks the execution of the importing module until the blocking code has finished!!!');\r\n\r\nconst shippingCost = 10;\r\nexport const cart = [];\r\n\r\nexport const addToCart = function (product, quantity) {\r\n  cart.push({ product, quantity });\r\n  console.log(`${quantity} ${product} added to cart`);\r\n};\r\n\r\nconst totalPrice = 237;\r\nconst totalQuantity = 23;\r\n\r\nexport { totalPrice, totalQuantity as tq };\r\n\r\nexport default function (product, quantity) {\r\n  cart.push({ product, quantity });\r\n  console.log(`${quantity} ${product} added to cart`);\r\n};\r\n"],"names":[],"version":3,"file":"script.js.map"}